# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserProfileOutput {
  id: String!
  nickname: String!
  email: String!
  aboutMe: String
  birthDate: Date!
  gender: Gender!
  firstName: String!
  lastName: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The users gender"""
enum Gender {
  Male
  Female
}

type PaginationInfo {
  total: Float!
  limit: Float
  offset: Float
}

type Comment {
  id: String!
  comment: String!
  author: UserProfileOutput
  authorId: String
  asset: Asset!
  assetId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedComments {
  paginationInfo: PaginationInfo
  comments: [Comment!]
}

type Asset {
  id: String!
  imageUrl: String!
  title: String!
  description: String!
  price: String!
  lastSale: String
  createdAt: DateTime!
  category: String
  creator: UserProfileOutput
  creatorId: String
  owner: UserProfileOutput!
  ownerId: String!
  comments(limit: Float = 10, offset: Float = 0, orderBy: OrderBy = {field: "createdAt"}): PaginatedComments
}

input OrderBy {
  field: String = "createdAt"
  direction: String = "DESC"
}

type User {
  id: String!
  nickname: String!
  email: String!
  aboutMe: String
  firstName: String!
  lastName: String!
  birthDate: Date!
  gender: Gender!
  assets: [Asset!]!
}

type PaginatedAssets {
  paginationInfo: PaginationInfo
  assets: [Asset!]!
}

type AccessTokenOutput {
  accessToken: String!
}

type TransactionOutput {
  id: String!
  coin: Coin!
  amount: Float!
  createdAt: DateTime!
  asset: Asset!
  assetId: String!
  buyer: UserProfileOutput!
  seller: UserProfileOutput!
}

"""Coin type"""
enum Coin {
  Bitcoin
}

type Query {
  getUserProfile(id: String!): UserProfileOutput!
  getAllAssets(limit: Float = 10, offset: Float = 0, orderBy: OrderBy = {field: "createdAt"}, searchTerm: String): PaginatedAssets!
  getAssetById(assetId: ID!): Asset!
  login(loginInput: LoginInput!): AccessTokenOutput!
  viewTransactions: [TransactionOutput!]!
}

input LoginInput {
  nickname: String!
  password: String!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): UserProfileOutput!
  deleteCurrentUser: Boolean!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  deleteComment(commentId: String!): Comment!
  createAsset(createAssetInput: CreateAssetInput!): Asset!
  deleteAsset(id: ID!): Asset!
  register(registerUserInput: RegisterUserInput!): User!
  buyAsset(assetId: String!): TransactionOutput!
}

input UpdateUserInput {
  nickname: String
  firstName: String
  lastName: String
  email: String
  aboutMe: String
  birthDate: Date
  gender: Gender
}

input CreateCommentInput {
  comment: String!
  assetId: String!
}

input UpdateCommentInput {
  id: String!
  comment: String!
}

input CreateAssetInput {
  imageUrl: String!
  title: String!
  description: String!
  category: String!
  price: Float!
}

input RegisterUserInput {
  nickname: String!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  birthDate: Date!
  gender: Gender
}